from pymongo import MongoClient
from dotenv import load_dotenv
import os
from datetime import datetime, timedelta
import logging
from functools import wraps
from typing import Callable, Any, List

"""
–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
    –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ `log_keyword_search`, `log_genre_year_search`, `log_genre_exact_year_search`,
    –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ `@log_search`.

    –û–Ω–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã:
        - –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è —è–≤–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤;
        - –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö, –æ—Ç–ª–∞–¥–∫–µ –∏–ª–∏ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤;
        - –∫–∞–∫ —á–∞—Å—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –ª–æ–≥–∏–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

    –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å.
"""



# üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
logging.basicConfig(
    filename="log.txt",
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    encoding="utf-8"
)

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env
load_dotenv()
MONGO_URI = os.getenv("MONGO_URI")
MONGO_DB = os.getenv("MONGO_DB")
MONGO_COLLECTION = os.getenv("MONGO_COLLECTION")

# üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = MongoClient(MONGO_URI)
db = client[MONGO_DB]
collection = db[MONGO_COLLECTION]


def log_search(log_type: str) -> Callable:
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        def wrapper(*args, **kwargs) -> Any:
            if kwargs.get("logged", False):
                return func(*args, **kwargs)

            now = datetime.utcnow()

            if log_type == "keyword":
                keyword = args[0].lower().strip()
                if not keyword:
                    return func(*args, **kwargs)

                recent = collection.find_one({
                    "type": "keyword",
                    "keyword": keyword,
                    "timestamp": {"$gte": now - timedelta(seconds=5)}
                })
                if not recent:
                    collection.insert_one({
                        "type": "keyword",
                        "keyword": keyword,
                        "timestamp": now
                    })
                    logging.info(f"–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: keyword ‚Üí '{keyword}'")

            elif log_type == "genre_year":
                genres: List[str] = args[0]
                year_from = args[1]
                year_to = args[2]

                genres_clean = [g.strip() for g in genres if g and g.strip()]
                if not genres_clean:
                    return func(*args, **kwargs)

                year_range = f"{year_from}‚Äì{year_to}"

                recent = collection.find_one({
                    "type": "genre_year",
                    "genres": sorted(genres_clean),
                    "years": year_range,
                    "timestamp": {"$gte": now - timedelta(seconds=5)}
                })
                if not recent:
                    collection.insert_one({
                        "type": "genre_year",
                        "genres": sorted(genres_clean),
                        "years": year_range,
                        "timestamp": now
                    })
                    logging.info(f"–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: genres ‚Üí {genres_clean} | years ‚Üí {year_range}")

            elif log_type == "genre_exact_year":
                genres: List[str] = args[0]
                raw_year = args[1]

                genres_clean = [g.strip() for g in genres if g and g.strip()]
                try:
                    year = int(raw_year)
                except (ValueError, TypeError):
                    year = None

                if not genres_clean or year is None or year < 1990:
                    return func(*args, **kwargs)

                recent = collection.find_one({
                    "type": "genre_exact_year",
                    "genres": sorted(genres_clean),
                    "year": year,
                    "timestamp": {"$gte": now - timedelta(seconds=5)}
                })
                if not recent:
                    collection.insert_one({
                        "type": "genre_exact_year",
                        "genres": sorted(genres_clean),
                        "year": year,
                        "timestamp": now
                    })
                    logging.info(f"–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: genres ‚Üí {genres_clean} | year ‚Üí {year}")

            return func(*args, **kwargs)
        return wrapper
    return decorator


def log_keyword_search(keyword: str) -> None:
    keyword = keyword.lower().strip()
    if not keyword:
        return

    now = datetime.utcnow()
    recent = collection.find_one({
        "type": "keyword",
        "keyword": keyword,
        "timestamp": {"$gte": now - timedelta(seconds=5)}
    })
    if not recent:
        collection.insert_one({
            "type": "keyword",
            "keyword": keyword,
            "timestamp": now
        })
        logging.info(f"–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: keyword ‚Üí '{keyword}'")


def log_genre_year_search(genres: List[str], year_from: int, year_to: int) -> None:
    genres_clean = [g.strip() for g in genres if g and g.strip()]
    if not genres_clean:
        return

    year_range = f"{year_from}‚Äì{year_to}"
    now = datetime.utcnow()
    recent = collection.find_one({
        "type": "genre_year",
        "genres": sorted(genres_clean),
        "years": year_range,
        "timestamp": {"$gte": now - timedelta(seconds=5)}
    })
    if not recent:
        collection.insert_one({
            "type": "genre_year",
            "genres": sorted(genres_clean),
            "years": year_range,
            "timestamp": now
        })
        logging.info(f"–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: genres ‚Üí {genres_clean} | years ‚Üí {year_range}")


def log_genre_exact_year_search(genres: List[str], year: int) -> None:
    genres_clean = [g.strip() for g in genres if g and g.strip()]
    if not genres_clean or year is None or year < 1990:
        return

    now = datetime.utcnow()
    recent = collection.find_one({
        "type": "genre_exact_year",
        "genres": sorted(genres_clean),
        "year": year,
        "timestamp": {"$gte": now - timedelta(seconds=5)}
    })
    if not recent:
        collection.insert_one({
            "type": "genre_exact_year",
            "genres": sorted(genres_clean),
            "year": year,
            "timestamp": now
        })
        logging.info(f"–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: genres ‚Üí {genres_clean} | year ‚Üí {year}")
